from aiogram import F, Router
from aiogram.types import CallbackQuery, Message
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from handlers.keyboard.timepicker import help_menu, return_to_menu, return_to_help_menu
from handlers.keyboard.support_kb import approve_payment_timeout
from handlers.keyboard.support_kb import (
    create_support_button,
    cancel_enter
)
from bot.bot_instance import bot
from database.database import db
from aiogram.exceptions import AiogramError


class UserQuery(StatesGroup):
    user_id = State()
    message_id = State()
    answer = State()

class AnswerRoom(StatesGroup):
    user_id = State()
    message_id = State()
    answer = State()


support = Router()

CHAT_ID = '-4190920965'


SUPPORT_TEXT = '‚ÑπÔ∏è –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –æ—Ç–≤–µ—Ç–∏—Ç –í–∞–º –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è!\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –í–∞—à –≤–æ–ø—Ä–æ—Åüëá'


@support.callback_query(F.data == 'info')
async def show_info(callback: CallbackQuery):
    keyboard = await help_menu()
    await callback.message.edit_text('‚ÑπÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ, –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â—É—é –í–∞—Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é!', reply_markup=keyboard)

@support.callback_query(F.data == 'rules')
async def show_rules(callback: CallbackQuery):
    keyboard = await return_to_help_menu()
    text = '''–ë–†–û–ù–ò–†–£–Ø –ê–ü–ê–†–¢–ê–ú–ï–ù–¢–´, –í–´ –°–û–ì–õ–ê–®–ê–ï–¢–ï–°–¨ –°–û–ë–õ–Æ–î–ê–¢–¨
üìç –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ ‚Äì 2 —á–∞—Å–∞
üìç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–æ–º–µ—Ä–∞ —è–≤–ª—è–µ—Ç—Å—è 100% –ø—Ä–µ–¥–æ–ø–ª–∞—Ç–∞
üìç —Å—Ç–æ–∏–º–æ—Å—Ç—å –∞—Ä–µ–Ω–¥—ã –∞–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç–æ–≤ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–∞ –¥–ª—è 2 –≥–æ—Å—Ç–µ–π. –¥–æ–ø–ª–∞—Ç–∞ –∑–∞ –∫–∞–∂–¥–æ–≥–æ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –≥–æ—Å—Ç—è ‚Äì 5 000 ‚ÇΩ. –≤ –∞–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç–∞—Ö –º–æ–≥—É—Ç –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –Ω–µ –±–æ–ª–µ–µ 4 —á–µ–ª–æ–≤–µ–∫
üìç –≤–ª–∞–¥–µ–ª—å—Ü—ã –∞–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç–æ–≤ –Ω–µ –Ω–µ—Å—É—Ç –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å –∑–∞ —É—â–µ—Ä–±, –ø—Ä–∏—á–∏–Ω—ë–Ω–Ω—ã–π –∑–¥–æ—Ä–æ–≤—å—é –∏ –∏–º—É—â–µ—Å—Ç–≤—É –≥–æ—Å—Ç–µ–π –∏–∑-–∑–∞ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∏–º–∏ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è, –∞–∫—Å–µ—Å—Å—É–∞—Ä–æ–≤ –∏ –º–µ–±–µ–ª–∏
üìç –µ—Å–ª–∏ –≥–æ—Å—Ç–∏ –ø–æ–∫–∏–¥–∞—é—Ç –Ω–æ–º–µ—Ä —Ä–∞–Ω—å—à–µ –∏—Å—Ç–µ—á–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏, –¥–µ–Ω—å–≥–∏ –∑–∞ –Ω–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è –Ω–µ –≤–æ–∑–≤—Ä–∞—â–∞—é—Ç—Å—è
üìç –ø—Ä–∏ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏–∏ –∏–ª–∏ –ø–æ–ª–æ–º–∫–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è, –∞–∫—Å–µ—Å—Å—É–∞—Ä–æ–≤ –∏–ª–∏ –º–µ–±–µ–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è –≤–ø—Ä–∞–≤–µ –≤–∑—ã—Å–∫–∞—Ç—å —Å –≥–æ—Å—Ç—è –∏—Ö –ø–æ–ª–Ω—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å
üìç –∑–∞–ø—Ä–µ—â–µ–Ω–æ –∫—É—Ä–µ–Ω–∏–µ, –≤–µ–π–ø—ã, –∫–∞–ª—å—è–Ω—ã –∏ –ª—é–±—ã–µ –¥—Ä—É–≥–∏–µ –≤–∏–¥—ã —Ç–∞–±–∞—á–Ω–æ–π –ø—Ä–æ–¥—É–∫—Ü–∏–∏, –∞ —Ç–∞–∫–∂–µ —á—Ä–µ–∑–º–µ—Ä–Ω–æ–µ —É–ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –∞–ª–∫–æ–≥–æ–ª—å–Ω—ã—Ö –Ω–∞–ø–∏—Ç–∫–æ–≤, —É–ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –Ω–∞—Ä–∫–æ—Ç–∏—á–µ—Å–∫–∏—Ö —Å—Ä–µ–¥—Å—Ç–≤.
üìç –∑–∞–ø—Ä–µ—â–µ–Ω –≤—Ö–æ–¥ —Å –æ—Ä—É–∂–∏–µ–º –∏–ª–∏ –∂–∏–≤–æ—Ç–Ω—ã–º–∏
üìç –∑–∞–ø—Ä–µ—â–µ–Ω–∞ –ø–µ—Ä–µ–¥–∞—á–∞ –∞–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç–æ–≤ –≤ —Å—É–±–∞—Ä–µ–Ω–¥—É –∏–ª–∏ –¥—Ä—É–≥–æ–µ –∏—Ö –∫–æ–º–º–µ—Ä—á–µ—Å–∫–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ'''
    await callback.message.edit_text(text=text, reply_markup=keyboard)


@support.callback_query(F.data == '_pay_rules')
async def show_pay_rules(callback: CallbackQuery):
    keyboard = await return_to_help_menu()
    text = '–†–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã –ø–æ—è–≤—è—Ç—Å—è –∑–¥–µ—Å—å –ø–æ—Å–ª–µ –±—Ä–æ–Ω–∏.'
    await callback.message.edit_text(text=text, reply_markup=keyboard)


@support.callback_query(F.data == 'location')
async def show_location(callback: CallbackQuery):
    keyboard = await return_to_help_menu()
    text = '—É–ª. –£–ª–∏—Ü–∞ 69, –ñ–ö –õ–∞–∑—É—Ä–Ω—ã–µ –ù–µ–±–µ—Å–∞'
    await callback.message.edit_text(text=text, reply_markup=keyboard)


@support.callback_query(F.data == 'help')
async def call_manager(callback: CallbackQuery):
    keyboard = await return_to_menu()
    await callback.message.edit_text(text=SUPPORT_TEXT, reply_markup=keyboard)


@support.message(F.chat.func(lambda chat: chat.id != int(CHAT_ID)))
async def forward_message(message: Message):
    user_id = message.from_user.id
    msg = message.text
    keyboard = await create_support_button(user_id=user_id)
    await message.reply(text='–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–∂–∏–¥–∞–π—Ç–µ, –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –æ—Ç–≤–µ—Ç–∏—Ç –í–∞–º –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è!')
    text = f"–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç #{user_id}\n\n{msg}"
    await bot.send_message(chat_id=CHAT_ID, text=text, reply_markup=keyboard)


@support.callback_query(F.data == 'deny_answer')
async def deny_answer_admin(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.message.delete()


@support.callback_query(F.data.startswith('user'))
async def start_answer_question_2(callback: CallbackQuery, state: FSMContext):
    await start_answer_question(callback, state)

@support.callback_query(F.data.startswith('answerBook'))
async def start_answer_question(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    user_id = callback.data.split('_')[1]
    keyboard = await cancel_enter()
    await state.set_state(UserQuery.answer)
    msg = await callback.message.answer(text=f'–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞ –¥–ª—è {user_id}:', reply_markup=keyboard)
    await state.update_data(user_id=user_id)
    await state.update_data(message_id=msg.message_id)


@support.message(F.chat.func(lambda chat: chat.id == int(CHAT_ID)), UserQuery.answer)
async def process_answer(message: Message, state: FSMContext):
    data = await state.get_data()
    user_id = data['user_id']
    message_id = data['message_id']
    text = 'üë§ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä:\n\n'
    text += message.text.strip()
    await bot.delete_message(chat_id=CHAT_ID, message_id=message_id)
    await bot.send_message(chat_id=int(user_id), text=text)
    await state.clear()


@support.callback_query(F.data.startswith('approvePay'))
async def process_payment_admin(callback: CallbackQuery):
    try:
        # –û—Ç–≤–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è 
        await callback.answer()
        message_data = callback.data.split('_')
        user_id = int(message_data[1])
        reserve_details = callback.message.text.split('#')[1].split('_')
        date = reserve_details[1]
        rent_start = reserve_details[2]
        rent_end = reserve_details[3]
        await db.update_booking_status(user_id=int(user_id), date=date, rent_start=rent_start, rent_end=rent_end)
        keyboard = await approve_payment_timeout(user_id=user_id)
        await callback.message.edit_reply_markup(inline_message_id=callback.inline_message_id, reply_markup=keyboard)
        text = '‚úÖ –í–∞—à–∞ –±—Ä–æ–Ω—å —É—Å–ø–µ—à–Ω–æ –æ–ø–ª–∞—á–µ–Ω–∞. –û–∂–∏–¥–∞–π—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–∞–ª—å–Ω–µ–π—à–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π –æ—Ç –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!'
        text += '\n\n–î–ª—è –æ–±—Ä–∞—â–µ–Ω–∏—è –∫ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É, –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç—É!'
        await bot.send_message(chat_id=user_id, text=text)
    except AiogramError as e:
        print(e)


@support.message(F.chat.func(lambda chat: chat.id == int(CHAT_ID)), AnswerRoom.answer)
async def process_answer_room_admin(message: Message, state: FSMContext):
    data = await state.get_data()
    user_id = data['user_id']
    message_id = data['message_id']
    text = 'üë§ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä:\n\n'
    text += message.text.strip()
    text += '\n\n–î–ª—è –æ–±—Ä–∞—â–µ–Ω–∏—è –∫ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É, –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç—É!'
    await bot.delete_message(chat_id=CHAT_ID, message_id=message_id)
    await bot.send_message(chat_id=int(user_id), text=text)
    await state.clear()